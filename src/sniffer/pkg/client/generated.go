// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package client

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type CaptureResultForSrcIp struct {
	SrcIp        string   `json:"srcIp"`
	Destinations []string `json:"destinations"`
}

// GetSrcIp returns CaptureResultForSrcIp.SrcIp, and is useful for accessing the field via an interface.
func (v *CaptureResultForSrcIp) GetSrcIp() string { return v.SrcIp }

// GetDestinations returns CaptureResultForSrcIp.Destinations, and is useful for accessing the field via an interface.
func (v *CaptureResultForSrcIp) GetDestinations() []string { return v.Destinations }

type CaptureResults struct {
	Results []CaptureResultForSrcIp `json:"results"`
}

// GetResults returns CaptureResults.Results, and is useful for accessing the field via an interface.
func (v *CaptureResults) GetResults() []CaptureResultForSrcIp { return v.Results }

// ReportCaptureResultsResponse is returned by ReportCaptureResults on success.
type ReportCaptureResultsResponse struct {
	ReportCaptureResults bool `json:"reportCaptureResults"`
}

// GetReportCaptureResults returns ReportCaptureResultsResponse.ReportCaptureResults, and is useful for accessing the field via an interface.
func (v *ReportCaptureResultsResponse) GetReportCaptureResults() bool { return v.ReportCaptureResults }

// __ReportCaptureResultsInput is used internally by genqlient
type __ReportCaptureResultsInput struct {
	Results CaptureResults `json:"results"`
}

// GetResults returns __ReportCaptureResultsInput.Results, and is useful for accessing the field via an interface.
func (v *__ReportCaptureResultsInput) GetResults() CaptureResults { return v.Results }

func ReportCaptureResults(
	ctx context.Context,
	client graphql.Client,
	results CaptureResults,
) (*ReportCaptureResultsResponse, error) {
	req := &graphql.Request{
		OpName: "ReportCaptureResults",
		Query: `
mutation ReportCaptureResults ($results: CaptureResults!) {
	reportCaptureResults(results: $results)
}
`,
		Variables: &__ReportCaptureResultsInput{
			Results: results,
		},
	}
	var err error

	var data ReportCaptureResultsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
